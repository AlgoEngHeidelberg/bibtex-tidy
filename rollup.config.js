import commonjs from '@rollup/plugin-commonjs';
import nodeResolve from '@rollup/plugin-node-resolve';
import { version } from './package.json';
import fs, { readFileSync, writeFileSync, mkdirSync } from 'fs';
import { join } from 'path';
import { builtinModules } from 'module';
import babel from '@rollup/plugin-babel';
import pegjs from 'pegjs';
import esbuild from 'esbuild';

const extensions = ['.ts', '.js'];

const SRC_PATH = join(__dirname, 'src');
const BUILD_PATH = join(SRC_PATH, '__generated__');

mkdirSync(BUILD_PATH, { recursive: true });

const banner = `/**
 * bibtex-tidy v${version}
 * https://github.com/FlamingTempura/bibtex-tidy
 *
 * DO NOT EDIT THIS FILE. This file is automatically generated
 * using \`npm run build\`. Edit files in './src' then rebuild.
 **/`;

const peg = readFileSync(join(SRC_PATH, 'bibtex.pegjs'), 'utf8');
const parser = pegjs.generate(peg, { output: 'source' });
writeFileSync(
	join(BUILD_PATH, 'bibtex.pegjs.js'),
	banner + '\nexport default ' + parser
);

function generateOptionTypes() {
	const { outputFiles } = esbuild.buildSync({
		entryPoints: [join(SRC_PATH, 'optionDefinitions.ts')],
		write: false,
		format: 'esm',
	});
	const bundle = new TextDecoder().decode(outputFiles[0].contents);
	// Bundle creates an export which eval doesn't know what to do with. Assign to
	// var instead.
	const options = eval(bundle.replace(/^export/m, 'const res = ') + '; res');

	const ts = [];

	ts.push(banner);
	ts.push('export type Options = {');
	for (const opt of options.optionDefinitions) {
		ts.push('\t/**');
		ts.push(`\t * ${opt.title}`);
		if (opt.description) {
			ts.push('\t *');
			for (const line of opt.description) {
				ts.push(`\t * ${line}`);
			}
		}
		ts.push('\t */');
		ts.push(`\t${opt.key}?: ${opt.type};`);
	}
	ts.push('};');
	ts.push('');

	writeFileSync(join(BUILD_PATH, 'optionsType.ts'), ts.join('\n'));
}

generateOptionTypes();

const makeExecutable = {
	name: 'make-executable',
	writeBundle(options) {
		const filename = options && (options.file || options.dest);
		fs.chmodSync(filename, 0o755); // rwxr-xr-x
	},
};

const browserTargets = {
	edge: '17',
	firefox: '60',
	chrome: '67',
	safari: '11.1',
};
const cliTargets = { node: '4.0.0' };

export default [
	{
		input: 'src/index.ts',
		plugins: [
			commonjs(),
			nodeResolve({ extensions }),
			babel({
				extensions,
				babelHelpers: 'bundled',
				// see https://babeljs.io/docs/en/usage/#configuration
				presets: [
					'@babel/typescript',
					['@babel/env', { targets: browserTargets }],
				],
				comments: false,
			}),
		],
		output: {
			name: 'bibtexTidy',
			file: 'bibtex-tidy.js',
			format: 'umd',
			banner,
		},
	},
	{
		input: 'src/cli.ts',
		external: builtinModules,
		plugins: [
			commonjs(),
			nodeResolve({ extensions }),
			babel({
				extensions,
				babelHelpers: 'bundled',
				presets: ['@babel/typescript', ['@babel/env', { targets: cliTargets }]],
				comments: false,
			}),
			makeExecutable,
		],
		output: {
			name: 'bibtexTidy',
			file: 'bin/bibtex-tidy',
			format: 'cjs',
			banner: '#!/usr/bin/env node\n' + banner,
		},
	},
	{
		input: 'docs/index.ts',
		plugins: [
			commonjs(),
			nodeResolve({ extensions }),
			babel({
				extensions,
				babelHelpers: 'bundled',
				// see https://babeljs.io/docs/en/usage/#configuration
				presets: [
					'@babel/typescript',
					['@babel/env', { targets: browserTargets }],
				],
				comments: false,
			}),
		],
		output: {
			name: 'bibtexTidy',
			file: 'docs/bundle.js',
			format: 'umd',
			banner,
		},
	},
];
