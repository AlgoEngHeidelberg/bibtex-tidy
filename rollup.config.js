import commonjs from '@rollup/plugin-commonjs';
import nodeResolve from '@rollup/plugin-node-resolve';
import { version } from './package.json';
import fs, { readFileSync, writeFileSync } from 'fs';
import { join } from 'path';
import { builtinModules } from 'module';
import babel from '@rollup/plugin-babel';
import pegjs from 'pegjs';

const extensions = ['.ts', '.js'];

const SRC_PATH = join(__dirname, 'src');

const banner = `/**
 * bibtex-tidy v${version}
 * https://github.com/FlamingTempura/bibtex-tidy
 * 
 * DO NOT EDIT THIS FILE. This file is automatically generated 
 * using \`npm run build\`. Edit files in './src' then rebuild.
 **/`;

const peg = readFileSync(join(SRC_PATH, 'bibtex.pegjs'), 'utf8');
const parser = pegjs.generate(peg, { output: 'source' });
writeFileSync(
	join(SRC_PATH, 'bibtex.pegjs.js'),
	banner + '\nexport default ' + parser
);

function formatDescription(str) {
	return str.replace(/([\w,.;:])\s+([A-Za-z])/g, '$1 $2').trim();
}

function formatType(type) {
	return type.trim();
}

const src = readFileSync(join(SRC_PATH, 'options.ts'), 'utf8');
// Find multiline comments and the line beneath each
const matches = src.matchAll(/\/\*\*(.*?)\*\/\n([^\n]*)/gs);
const options = [...matches]
	.map((m) => {
		const [description, ...tagComments] = m[1]
			.replace(/^\s*\* */gm, '')
			.trim()
			.split('@');
		const tags = tagComments.map((part) => {
			const [name, ...description] = part.split(' ');
			return { name, description: formatDescription(description.join(' ')) };
		});
		const [name, type] = m[2].split(':');
		const key = name.replace('?', '').trim();
		return {
			key,
			// convert camelCase to --dash-argument
			cli: key.replace(/[A-Z]/g, (c) => `-${c.toLowerCase()}`),
			description: formatDescription(description),
			examples: tags
				.filter((tag) => tag.name === 'example')
				.map((tag) => tag.description),
			type: formatType(type.replace(';', '')),
			deprecated: tags.some((tag) => tag.name === 'deprecated'),
		};
	})
	.sort((a) => (a.key === 'help' ? -1 : 0));

writeFileSync(
	join(SRC_PATH, 'optionDefinitions.ts'),
	banner + `export default ${JSON.stringify(options, null, 2)}`
);

const makeExecutable = {
	name: 'make-executable',
	writeBundle(options) {
		const filename = options && (options.file || options.dest);
		fs.chmodSync(filename, 0o755); // rwxr-xr-x
	},
};

const browserTargets = {
	edge: '17',
	firefox: '60',
	chrome: '67',
	safari: '11.1',
};
const cliTargets = { node: '4.0.0' };

export default [
	{
		input: 'src/index.ts',
		plugins: [
			commonjs(),
			nodeResolve({ extensions }),
			babel({
				extensions,
				babelHelpers: 'bundled',
				// see https://babeljs.io/docs/en/usage/#configuration
				presets: [
					'@babel/typescript',
					['@babel/env', { targets: browserTargets }],
				],
				comments: false,
			}),
		],
		output: {
			name: 'bibtexTidy',
			file: 'bibtex-tidy.js',
			format: 'umd',
			banner,
		},
	},
	{
		input: 'src/cli.ts',
		external: builtinModules,
		plugins: [
			commonjs(),
			nodeResolve({ extensions }),
			babel({
				extensions,
				babelHelpers: 'bundled',
				presets: ['@babel/typescript', ['@babel/env', { targets: cliTargets }]],
				comments: false,
			}),
			makeExecutable,
		],
		output: {
			name: 'bibtexTidy',
			file: 'bin/bibtex-tidy',
			format: 'cjs',
			banner: '#!/usr/bin/env node\n' + banner,
		},
	},
	{
		input: 'docs/index.ts',
		plugins: [
			commonjs(),
			nodeResolve({ extensions }),
			babel({
				extensions,
				babelHelpers: 'bundled',
				// see https://babeljs.io/docs/en/usage/#configuration
				presets: [
					'@babel/typescript',
					['@babel/env', { targets: browserTargets }],
				],
				comments: false,
			}),
		],
		output: {
			name: 'bibtexTidy',
			file: 'docs/bundle.js',
			format: 'umd',
			banner,
		},
	},
];
